stages:
  - build
  - test
  - release
  - deploy

build-job:
  stage: build
  image: python:3.12.3
  script:
    - echo "Setting up virtual env"
    - python -m venv venv
    - source venv/bin/activate
    - echo "Installing requirements"
    - pip install -r requirements.txt
    - deactivate
  artifacts:
    paths:
      - venv/
    expire_in: 1 hour

test-job:
  stage: test
  image: python:3.12.3
  dependencies:
    - build-job
  script:
    - echo "Running tests"
    - source venv/bin/activate
    - python manage.py runserver &
    - sleep 3
    - curl -sSf http://localhost:8000 > /dev/null && echo "Server is up"
    - pkill -f "python manage.py runserver"
    - deactivate
    - echo "All tests successfully passed"

variables:
  CONTAINER_IMAGE: $CI_REGISTRY_IMAGE:latest

release-job:
  services:
    - docker:dind
  stage: release
  image: docker:latest
  before_script:
    - echo "$CI_REGISTRY_PASSWORD" | docker login $CI_REGISTRY -u $CI_REGISTRY_USER --password-stdin
  script:
    - docker build -t $CONTAINER_IMAGE .
    - docker push $CONTAINER_IMAGE
  after_script:
    - docker logout
  retry:
    max: 2
    when:
      - always

deploy-job:
  services:
    - docker:dind
  stage: deploy
  image: docker:latest
  before_script:
    - chmod 400 $SSH_KEY
  script:
    - ssh -o StrictHostKeyChecking=no -i $SSH_KEY -p 69 $SERVER_USER@$SERVER_IP "
      docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY &&
      cd /applications/maceioin &&
      docker pull $CONTAINER_IMAGE &&
      docker compose down &&
      docker compose up -d"